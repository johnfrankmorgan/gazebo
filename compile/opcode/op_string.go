// Code generated by "stringer -type=Op -output=compile/opcode/op_string.go compile/opcode/op.go"; DO NOT EDIT.

package opcode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Jump-1]
	_ = x[JumpIfTrue-2]
	_ = x[LoadLiteral-3]
	_ = x[LoadName-4]
	_ = x[StoreName-5]
	_ = x[MakeList-6]
	_ = x[MakeMap-7]
	_ = x[MakeTuple-8]
	_ = x[GetAttribute-9]
	_ = x[SetAttribute-10]
	_ = x[_HasArgumentEnd-11]
	_ = x[GetIndex-12]
	_ = x[SetIndex-13]
	_ = x[LoadNil-14]
	_ = x[LoadFalse-15]
	_ = x[LoadTrue-16]
	_ = x[Return-17]
	_ = x[UnaryNot-18]
	_ = x[UnaryPlus-19]
	_ = x[UnaryMinus-20]
	_ = x[BinaryAnd-21]
	_ = x[BinaryOr-22]
	_ = x[BinaryIs-23]
	_ = x[BinaryEqual-24]
	_ = x[BinaryNotEqual-25]
	_ = x[BinaryLessThan-26]
	_ = x[BinaryLessThanOrEqual-27]
	_ = x[BinaryGreaterThan-28]
	_ = x[BinaryGreaterThanOrEqual-29]
	_ = x[BinaryIn-30]
	_ = x[BinaryAdd-31]
	_ = x[BinarySubtract-32]
	_ = x[BinaryMultiply-33]
	_ = x[BinaryDivide-34]
	_ = x[BinaryModulo-35]
	_ = x[BinaryBitwiseAnd-36]
	_ = x[BinaryBitwiseOr-37]
	_ = x[BinaryBitwiseXor-38]
	_ = x[BinaryShiftLeft-39]
	_ = x[BinaryShiftRight-40]
}

const _Op_name = "JumpJumpIfTrueLoadLiteralLoadNameStoreNameMakeListMakeMapMakeTupleGetAttributeSetAttribute_HasArgumentEndGetIndexSetIndexLoadNilLoadFalseLoadTrueReturnUnaryNotUnaryPlusUnaryMinusBinaryAndBinaryOrBinaryIsBinaryEqualBinaryNotEqualBinaryLessThanBinaryLessThanOrEqualBinaryGreaterThanBinaryGreaterThanOrEqualBinaryInBinaryAddBinarySubtractBinaryMultiplyBinaryDivideBinaryModuloBinaryBitwiseAndBinaryBitwiseOrBinaryBitwiseXorBinaryShiftLeftBinaryShiftRight"

var _Op_index = [...]uint16{0, 4, 14, 25, 33, 42, 50, 57, 66, 78, 90, 105, 113, 121, 128, 137, 145, 151, 159, 168, 178, 187, 195, 203, 214, 228, 242, 263, 280, 304, 312, 321, 335, 349, 361, 373, 389, 404, 420, 435, 451}

func (i Op) String() string {
	i -= 1
	if i < 0 || i >= Op(len(_Op_index)-1) {
		return "Op(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
