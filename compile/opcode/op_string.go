// Code generated by "stringer -type=Op -output=compile/opcode/op_string.go compile/opcode/op.go"; DO NOT EDIT.

package opcode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Jump-1]
	_ = x[JumpIfTrue-2]
	_ = x[LoadLiteral-3]
	_ = x[LoadName-4]
	_ = x[StoreName-5]
	_ = x[MakeList-6]
	_ = x[MakeTuple-7]
	_ = x[_HasArgumentEnd-8]
	_ = x[LoadNil-9]
	_ = x[LoadFalse-10]
	_ = x[LoadTrue-11]
	_ = x[Return-12]
	_ = x[UnaryNot-13]
	_ = x[UnaryPlus-14]
	_ = x[UnaryMinus-15]
	_ = x[BinaryAnd-16]
	_ = x[BinaryOr-17]
	_ = x[BinaryIs-18]
	_ = x[BinaryEqual-19]
	_ = x[BinaryNotEqual-20]
	_ = x[BinaryLessThan-21]
	_ = x[BinaryLessThanOrEqual-22]
	_ = x[BinaryGreaterThan-23]
	_ = x[BinaryGreaterThanOrEqual-24]
	_ = x[BinaryIn-25]
	_ = x[BinaryAdd-26]
	_ = x[BinarySubtract-27]
	_ = x[BinaryMultiply-28]
	_ = x[BinaryDivide-29]
	_ = x[BinaryModulo-30]
	_ = x[BinaryBitwiseAnd-31]
	_ = x[BinaryBitwiseOr-32]
	_ = x[BinaryBitwiseXor-33]
	_ = x[BinaryShiftLeft-34]
	_ = x[BinaryShiftRight-35]
}

const _Op_name = "JumpJumpIfTrueLoadLiteralLoadNameStoreNameMakeListMakeTuple_HasArgumentEndLoadNilLoadFalseLoadTrueReturnUnaryNotUnaryPlusUnaryMinusBinaryAndBinaryOrBinaryIsBinaryEqualBinaryNotEqualBinaryLessThanBinaryLessThanOrEqualBinaryGreaterThanBinaryGreaterThanOrEqualBinaryInBinaryAddBinarySubtractBinaryMultiplyBinaryDivideBinaryModuloBinaryBitwiseAndBinaryBitwiseOrBinaryBitwiseXorBinaryShiftLeftBinaryShiftRight"

var _Op_index = [...]uint16{0, 4, 14, 25, 33, 42, 50, 59, 74, 81, 90, 98, 104, 112, 121, 131, 140, 148, 156, 167, 181, 195, 216, 233, 257, 265, 274, 288, 302, 314, 326, 342, 357, 373, 388, 404}

func (i Op) String() string {
	i -= 1
	if i < 0 || i >= Op(len(_Op_index)-1) {
		return "Op(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
