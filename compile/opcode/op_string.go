// Code generated by "stringer -type=Op -output=compile/opcode/op_string.go compile/opcode/op.go"; DO NOT EDIT.

package opcode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Jump-1]
	_ = x[JumpIfTrue-2]
	_ = x[LoadLiteral-3]
	_ = x[LoadName-4]
	_ = x[StoreName-5]
	_ = x[MakeList-6]
	_ = x[MakeTuple-7]
	_ = x[_HasArgumentEnd-8]
	_ = x[GetIndex-9]
	_ = x[SetIndex-10]
	_ = x[LoadNil-11]
	_ = x[LoadFalse-12]
	_ = x[LoadTrue-13]
	_ = x[Return-14]
	_ = x[UnaryNot-15]
	_ = x[UnaryPlus-16]
	_ = x[UnaryMinus-17]
	_ = x[BinaryAnd-18]
	_ = x[BinaryOr-19]
	_ = x[BinaryIs-20]
	_ = x[BinaryEqual-21]
	_ = x[BinaryNotEqual-22]
	_ = x[BinaryLessThan-23]
	_ = x[BinaryLessThanOrEqual-24]
	_ = x[BinaryGreaterThan-25]
	_ = x[BinaryGreaterThanOrEqual-26]
	_ = x[BinaryIn-27]
	_ = x[BinaryAdd-28]
	_ = x[BinarySubtract-29]
	_ = x[BinaryMultiply-30]
	_ = x[BinaryDivide-31]
	_ = x[BinaryModulo-32]
	_ = x[BinaryBitwiseAnd-33]
	_ = x[BinaryBitwiseOr-34]
	_ = x[BinaryBitwiseXor-35]
	_ = x[BinaryShiftLeft-36]
	_ = x[BinaryShiftRight-37]
}

const _Op_name = "JumpJumpIfTrueLoadLiteralLoadNameStoreNameMakeListMakeTuple_HasArgumentEndGetIndexSetIndexLoadNilLoadFalseLoadTrueReturnUnaryNotUnaryPlusUnaryMinusBinaryAndBinaryOrBinaryIsBinaryEqualBinaryNotEqualBinaryLessThanBinaryLessThanOrEqualBinaryGreaterThanBinaryGreaterThanOrEqualBinaryInBinaryAddBinarySubtractBinaryMultiplyBinaryDivideBinaryModuloBinaryBitwiseAndBinaryBitwiseOrBinaryBitwiseXorBinaryShiftLeftBinaryShiftRight"

var _Op_index = [...]uint16{0, 4, 14, 25, 33, 42, 50, 59, 74, 82, 90, 97, 106, 114, 120, 128, 137, 147, 156, 164, 172, 183, 197, 211, 232, 249, 273, 281, 290, 304, 318, 330, 342, 358, 373, 389, 404, 420}

func (i Op) String() string {
	i -= 1
	if i < 0 || i >= Op(len(_Op_index)-1) {
		return "Op(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
