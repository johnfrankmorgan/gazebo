// Code generated by "stringer -type=Op -output=compile/opcode/op_string.go compile/opcode/op.go"; DO NOT EDIT.

package opcode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Jump-1]
	_ = x[JumpIfTrue-2]
	_ = x[LoadLiteral-3]
	_ = x[LoadName-4]
	_ = x[StoreName-5]
	_ = x[MakeList-6]
	_ = x[MakeMap-7]
	_ = x[MakeTuple-8]
	_ = x[GetAttribute-9]
	_ = x[SetAttribute-10]
	_ = x[Call-11]
	_ = x[_HasArgumentEnd-12]
	_ = x[GetIndex-13]
	_ = x[SetIndex-14]
	_ = x[LoadNil-15]
	_ = x[LoadFalse-16]
	_ = x[LoadTrue-17]
	_ = x[Return-18]
	_ = x[UnaryNot-19]
	_ = x[UnaryPlus-20]
	_ = x[UnaryMinus-21]
	_ = x[BinaryAnd-22]
	_ = x[BinaryOr-23]
	_ = x[BinaryIs-24]
	_ = x[BinaryEqual-25]
	_ = x[BinaryNotEqual-26]
	_ = x[BinaryLessThan-27]
	_ = x[BinaryLessThanOrEqual-28]
	_ = x[BinaryGreaterThan-29]
	_ = x[BinaryGreaterThanOrEqual-30]
	_ = x[BinaryIn-31]
	_ = x[BinaryAdd-32]
	_ = x[BinarySubtract-33]
	_ = x[BinaryMultiply-34]
	_ = x[BinaryDivide-35]
	_ = x[BinaryModulo-36]
	_ = x[BinaryBitwiseAnd-37]
	_ = x[BinaryBitwiseOr-38]
	_ = x[BinaryBitwiseXor-39]
	_ = x[BinaryShiftLeft-40]
	_ = x[BinaryShiftRight-41]
}

const _Op_name = "JumpJumpIfTrueLoadLiteralLoadNameStoreNameMakeListMakeMapMakeTupleGetAttributeSetAttributeCall_HasArgumentEndGetIndexSetIndexLoadNilLoadFalseLoadTrueReturnUnaryNotUnaryPlusUnaryMinusBinaryAndBinaryOrBinaryIsBinaryEqualBinaryNotEqualBinaryLessThanBinaryLessThanOrEqualBinaryGreaterThanBinaryGreaterThanOrEqualBinaryInBinaryAddBinarySubtractBinaryMultiplyBinaryDivideBinaryModuloBinaryBitwiseAndBinaryBitwiseOrBinaryBitwiseXorBinaryShiftLeftBinaryShiftRight"

var _Op_index = [...]uint16{0, 4, 14, 25, 33, 42, 50, 57, 66, 78, 90, 94, 109, 117, 125, 132, 141, 149, 155, 163, 172, 182, 191, 199, 207, 218, 232, 246, 267, 284, 308, 316, 325, 339, 353, 365, 377, 393, 408, 424, 439, 455}

func (i Op) String() string {
	i -= 1
	if i < 0 || i >= Op(len(_Op_index)-1) {
		return "Op(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
