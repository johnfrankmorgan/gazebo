// Code generated by "stringer -type=BinaryOp -output=ast/expr/binary_string.go ast/expr/binary.go"; DO NOT EDIT.

package expr

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BinaryAnd-1]
	_ = x[BinaryOr-2]
	_ = x[BinaryIs-3]
	_ = x[BinaryEqual-4]
	_ = x[BinaryNotEqual-5]
	_ = x[BinaryLessThan-6]
	_ = x[BinaryLessThanOrEqual-7]
	_ = x[BinaryGreaterThan-8]
	_ = x[BinaryGreaterThanOrEqual-9]
	_ = x[BinaryIn-10]
	_ = x[BinaryAdd-11]
	_ = x[BinarySubtract-12]
	_ = x[BinaryMultiply-13]
	_ = x[BinaryDivide-14]
	_ = x[BinaryModulo-15]
	_ = x[BinaryBitwiseAnd-16]
	_ = x[BinaryBitwiseOr-17]
	_ = x[BinaryBitwiseXor-18]
	_ = x[BinaryShiftLeft-19]
	_ = x[BinaryShiftRight-20]
}

const _BinaryOp_name = "BinaryAndBinaryOrBinaryIsBinaryEqualBinaryNotEqualBinaryLessThanBinaryLessThanOrEqualBinaryGreaterThanBinaryGreaterThanOrEqualBinaryInBinaryAddBinarySubtractBinaryMultiplyBinaryDivideBinaryModuloBinaryBitwiseAndBinaryBitwiseOrBinaryBitwiseXorBinaryShiftLeftBinaryShiftRight"

var _BinaryOp_index = [...]uint16{0, 9, 17, 25, 36, 50, 64, 85, 102, 126, 134, 143, 157, 171, 183, 195, 211, 226, 242, 257, 273}

func (i BinaryOp) String() string {
	i -= 1
	if i < 0 || i >= BinaryOp(len(_BinaryOp_index)-1) {
		return "BinaryOp(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _BinaryOp_name[_BinaryOp_index[i]:_BinaryOp_index[i+1]]
}
